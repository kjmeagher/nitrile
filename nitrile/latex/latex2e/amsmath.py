from package_defs import *

from package import Package

class amsmath(Package):
    text_commands = {
        "checkmark" : symbol(u"\N{CHECK MARK}"),
        "circledR"  : symbol(u"\N{REGISTERED SIGN}"),
        "maltese"   : symbol(u"\N{MALTESE CROSS}"),
        }

    math_commands = {
        "barwedge"        : symbol(u"\N{PROJECTIVE}"),
        "boxdot"          : symbol(u"\N{SQUARED DOT OPERATOR}"),
        "boxminus"        : symbol(u"\N{SQUARED MINUS}"),
        "boxplus"         : symbol(u"\N{SQUARED PLUS}"),
        "boxtimes"        : symbol(u"\N{SQUARED TIMES}"),
        "Cap"             : symbol(u"\N{DOUBLE INTERSECTION}"),
        "centerdot"       : symbol(u"\N{MIDDLE DOT}"),
        "circledast"      : symbol(u"\N{CIRCLED ASTERISK OPERATOR}"),
        "circledcirc"     : symbol(u"\N{CIRCLED RING OPERATOR}"),
        "circleddash"     : symbol(u"\N{CIRCLED DASH}"),
        "Cup"             : symbol(u"\N{DOUBLE UNION}"),
        "curlyvee"        : symbol(u"\N{CURLY LOGICAL OR}"),
        "curlywedge"      : symbol(u"\N{CURLY LOGICAL AND}"),
        "divideontimes"   : symbol(u"\N{DIVISION TIMES}"),
        "dotplus"         : symbol(u"\N{DOT PLUS}"),
        "doublebarwedge"  : symbol(u"\N{PERSPECTIVE}"),
        "intercal"        : symbol(u"\N{INTERCALATE}"),
        "leftthreetimes"  : symbol(u"\N{LEFT SEMIDIRECT PRODUCT}"),
        "ltimes"          : symbol(u"\N{LEFT NORMAL FACTOR SEMIDIRECT PRODUCT}"),
        "rightthreetimes" : symbol(u"\N{RIGHT SEMIDIRECT PRODUCT}"),
        "rtimes"          : symbol(u"\N{RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT}"),
        "smallsetminus"   : symbol(u"\N{SET MINUS}"),
        "veebar"          : symbol(u"\N{XOR}"),

        #Table 58: AMS Variable-sized Math Operators
        "iint" : symbol(u"\N{DOUBLE INTEGRAL}"),
        "iiint" : symbol(u"\N{TRIPLE INTEGRAL}"),
        "iiiint" : symbol(u"\N{QUADRUPLE INTEGRAL OPERATOR}"),
        "idotsint" : symbol(u"\N{INTEGRAL}\{MIDLINE HORIZONTAL ELLIPSIS}\N{INTEGRAL}"),
        
        #Table 68: AMS Binary Relations
        "approxeq" : symbol(u"\N{APPROXIMATELY EQUAL TO}"),
        "backepsilon" : symbol(u"\N{GREEK REVERSED LUNATE EPSILON SYMBOL}"),
        "backsim" : symbol(u"\N{REVERSED TILDE}"),
        "backsimeq" : symbol(u"\N{REVERSED TILDE EQUALS}"),
        "because" : symbol(u"\N{BECAUSE}"),
        "between" : symbol(u"\N{BETWEEN}"),
        "Bumpeq" : symbol(u"\N{GEOMETRICALLY EQUIVALENT TO}"),
        "bumpeq" : symbol(u"\N{DIFFERENCE BETWEEN}"),
        "circeq" : symbol(u"\N{RING EQUAL TO}"),
        "curlyeqprec" : symbol(u"\N{EQUAL TO OR PRECEDES}"),
        "curlyeqsucc" : symbol(u"\N{EQUAL TO OR SUCCEEDS}"),
        "doteqdot" : symbol(u"\N{GEOMETRICALLY EQUAL TO}"),
        "eqcirc" : symbol(u"\N{RING IN EQUAL TO}"),
        "fallingdotseq" : symbol(u"\N{APPROXIMATELY EQUAL TO OR THE IMAGE OF}"),
        "multimap" : symbol(u"\N{MULTIMAP}"),
        "pitchfork" : symbol(u"\N{PITCHFORK}"),
        "precapprox" : symbol(u"\N{PRECEDES ABOVE ALMOST EQUAL TO}"),
        "preccurlyeq" : symbol(u"\N{PRECEDES OR EQUAL TO}"),
        "precsim" : symbol(u"\N{PRECEDES OR EQUIVALENT TO}"),
        "risingdotseq" : symbol(u"\N{IMAGE OF OR APPROXIMATELY EQUAL TO}"),
        "shortmid" : symbol(u"\N{DIVIDES}"),
        "shortparallel" : symbol(u"\N{PARALLEL TO}"),
        "smallfrown" : symbol(u"\N{FROWN}"),
        "smallsmile" : symbol(u"\N{SMILE}"),
        "succapprox" : symbol(u"\N{SUCCEEDS ABOVE ALMOST EQUAL TO}"),
        "succcurlyeq" : symbol(u"\N{SUCCEEDS OR EQUAL TO}"),
        "succsim" : symbol(u"\N{SUCCEEDS OR EQUIVALENT TO}"),
        "therefore" : symbol(u"\N{THEREFORE}"),
        "thickapprox" : symbol(u"\N{ALMOST EQUAL TO}"),
        "thicksim" : symbol(u"\N{TILDE OPERATOR}"),
        "varpropto" : symbol(u"\N{PROPORTIONAL TO}"),
        "Vdash" : symbol(u"\N{FORCES}"),
        "vDash" : symbol(u"\N{TRUE}"),
        "Vvdash" : symbol(u"\N{TRIPLE VERTICAL BAR RIGHT TURNSTILE}"),
    }

    """
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),

          "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
  "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
        "" : symbol(u"\N{}"),
"""
